<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Arsalan Akhter</title>
    <description>Multi-Robot Systems | Operations Research | Systems Engineering | WPI</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 07 Dec 2022 14:24:08 -0500</pubDate>
    <lastBuildDate>Wed, 07 Dec 2022 14:24:08 -0500</lastBuildDate>
    <generator>Jekyll v3.9.2</generator>
    
      <item>
        <title>Exploring Asprilo</title>
        <description>&lt;p&gt;Asprilo is an open-source simulator for simulating robots in a warehouse environemnt, much like amazon robotics style robots. The goal of this post is to see how can we quickly get asprilo up and running.&lt;/p&gt;

&lt;p&gt;From &lt;a href=&quot;https://asprilo.github.io/&quot;&gt;asprilo’s website&lt;/a&gt;:&lt;/p&gt;

&lt;p style=&quot;text-align: center;&quot;&gt;
&lt;em&gt;
&lt;strong&gt;asprilo&lt;/strong&gt; is a benchmarking framework to study typical scenarios in intra-logistics and warehouse automation with multiple mobile robots.
&lt;/em&gt;
&lt;/p&gt;

&lt;p&gt;Following video shows an instance of the software, with detailed installation instructions &lt;a href=&quot;https://asprilo.github.io/visualizer/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;https://www.youtube.com/embed/ifYKHIvdnjw&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h3&gt;Quick Setup&lt;/h3&gt;

&lt;p&gt;We’ll jump right into getting it up and running. Assuming we have &lt;a href=&quot;https://conda.io/projects/conda/en/latest/user-guide/install/index.html&quot;&gt;anaconda installed&lt;/a&gt;, (which is an environment manager for python), we can run the following commands to get it up and running.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;conda create &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; asprilo-env &lt;span class=&quot;nv&quot;&gt;python&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3.6
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;conda activate asprilo-env
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;conda config &lt;span class=&quot;nt&quot;&gt;--add&lt;/span&gt; channels potassco
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;conda config &lt;span class=&quot;nt&quot;&gt;--add&lt;/span&gt; channels potassco/label/dev
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;conda &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; asprilo-visualizer asprilo-generator
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To confirm if everything is installed correctly, type&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gen &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;which should result in a help output for aspirilo generator.&lt;/p&gt;

&lt;p&gt;Documentation on Aspirilo Generator can be found &lt;a href=&quot;https://asprilo.github.io/generator/&quot;&gt;here&lt;/a&gt;. We’ll create a new instance using the following command&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;asprilo-ws &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;asprilo-ws
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gen &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt; 13 &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; 12 &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; 5 &lt;span class=&quot;nt&quot;&gt;-Y&lt;/span&gt; 2 &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; 30 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 3 &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; 5 &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt; 6 &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; 32 &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; 8 &lt;span class=&quot;nt&quot;&gt;--spr&lt;/span&gt; 2 &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; 4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Where we generate an instance with&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;13 x 12 grid &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x 13 -y 12&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;5 x 2 shelf cluster dimensions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-X 5 -Y 2&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;30 shelves &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-s 30&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;3 picking stations &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-p 3&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;5 robots &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-r 5&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;highway-layout &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-H&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;6 products &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-P 6&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;32 product units &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-u 32&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;8 orders &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-o 8&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;3 shelves per product that hold its units &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--spr 3&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;4 clingo threads &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-t 4&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This will generate a new instance in a new folder named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;generatedInstances&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To visualize the result, we can run&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt; viz &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; generatedInstances/x13_y12_n156_r5_s30_ps3_pr6_u32_o8_l8_N001.lp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;which opens the visulizer with the generated result, as follows:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/asprilo/asprilo1.jpeg&quot; alt=&quot;Generated Result in Aspirilo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Concluding, aspirilo is a useful tool to simulate warehouse robots. Here we just looked at how to quickly get the simulation environment up and running for a warehouse robotics scenario.&lt;/p&gt;

&lt;p&gt;In a future post we may further explore how to actually plan paths for these robots.&lt;/p&gt;

</description>
        <pubDate>Sun, 17 May 2020 11:16:00 -0400</pubDate>
        <link>http://localhost:4000/2020/Exploring-Asprilo/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/Exploring-Asprilo/</guid>
        
        <category>Multi-agent</category>
        
        <category>Path Finding</category>
        
        <category>MAPF</category>
        
        <category>Warehouse</category>
        
        <category>Robotics</category>
        
        <category>Multi-robot</category>
        
        <category>Simulator</category>
        
        <category>Asprilo</category>
        
        
        <category>Warehouse Robotics</category>
        
      </item>
    
  </channel>
</rss>
